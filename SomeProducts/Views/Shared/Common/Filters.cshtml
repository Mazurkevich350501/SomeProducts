
@using R = Resources.LocalResource
@using Type = SomeProducts.CrossCutting.Filter.Model.Type
@model SomeProducts.CrossCutting.Filter.Model.FilterInfo

<div class="row-fluid">
    <div class="box span12">
        <div class="box-header" data-original-title>
            <h2><i class="halflings-icon filter white user"></i><span class="break"></span>@R.Filters</h2>
            <div class="box-icon">
                <a href="#" class="btn-minimize"><i class="halflings-icon white chevron-down"></i></a>
            </div>
        </div>
        <div class="box-content" style="display: none;">
            @for (int i = 0; i < Model.Filters.Count;)
            {
                <div class="row-fluid">
                    @do
                    {
                        <div class="span3">
                            <h4>
                                @Model.Filters.ToArray()[i].FilterName
                            </h4>
                            <div>
                                <span class="field-validation-error" id="validation-@(Model.Filters.ToArray()[i].Option)ValueId"></span>
                                <div class="row-fluid ">
                                    <div class="input-prepend input-append filter-option-input-div span11">
                                        <span class="add-on">
                                            @if (Model.Filters.ToArray()[i].Type == Type.Numeric)
                                            {
                                                @Html.DropDownListFor(m => m.Filters.ToArray()[i].Parameter, new SelectList(Model.NumberFilterParameter, "Key", "Value"),
                                                    new
                                                    {
                                                        @class = "btn btn-default dropdown-toggle filter-param-select",
                                                        id = $"{Model.Filters.ToArray()[i].Option}ParameterId",
                                                        value = Model.Filters.ToArray()[i].Parameter
                                                    })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(m => m.Filters.ToArray()[i].Parameter, new SelectList(Model.StringFilterParameter, "Key", "Value"),
                                                    new
                                                    {
                                                        @class = "btn btn-default dropdown-toggle filter-param-select",
                                                        id = $"{Model.Filters.ToArray()[i].Option}ParameterId",
                                                        value = Model.Filters.ToArray()[i].Parameter
                                                    })
                                            }
                                        </span>
                                        <input class="form-control span11"
                                               type="@(Model.Filters.ToArray()[i].Type == Type.Numeric ? "number" : "text")"
                                               id="@(Model.Filters.ToArray()[i].Option)ValueId"
                                               value="@Model.Filters.ToArray()[i].Value"
                                               data-type="validate"/>
                                    </div>

                                </div>
                            </div>
                        </div>
                    } while ((++i % 4 != 0) && (i < Model.Filters.Count));

                </div>
            }
            <div>
                <div>
                    <button class="btn btn-primary" id="FilterBtn">@R.Filter</button>
                    <button class="btn btn-default" id="clearFiltersBtnId">@R.Clear</button>
                </div>
            </div>
        </div>
    </div>
</div>
