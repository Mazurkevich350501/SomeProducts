@using System.Web.Script.Serialization
@using PagedList.Mvc
@using SomeProducts.CrossCutting.Filter
@using FilterInfo = SomeProducts.CrossCutting.Filter.FilterInfo
@using Filter = SomeProducts.CrossCutting.Filter.Filter
@model SomeProducts.PresentationServices.Models.ProductTable.ProductTableViewModel
@{
    var filters = new List<Filter>();
    foreach (var filter in Model.FilterInfo.Filters)
    {
        if (filter.Parameter == FilterParameter.IsEmty || filter.Parameter == FilterParameter.IsNotEmty
            || filter.Parameter == FilterParameter.IsNotNull || filter.Parameter == FilterParameter.IsNull)
        {
            filters.Add(filter);
        }
        else if (filter.Value != null)
        {
            filters.Add(filter);
        }
    }
    var info = new JavaScriptSerializer().Serialize(new FilterInfo
    {
        Filters = filters
    });
}

<div>

    <div class="row filters-container">
        @for (var i = 0; i < Model.FilterInfo.Filters.Count; i++)
        {
            <div class="col-xs-3">
                <h4>
                    @Model.FilterInfo.Filters.ToArray()[i].Option.Split('_')[0]
                </h4>
                <div class="row">
                    <div class="col-xs-10 filter-option-input-div">
                        <input class="form-control @(Model.FilterInfo.Filters.ToArray()[i].Option == "Quantity" ? "numbre" : "")" 
                               id="@(Model.FilterInfo.Filters.ToArray()[i].Option)ValueId"
                               value="@Model.FilterInfo.Filters.ToArray()[i].Value" />
                    </div>
                        <div>
                            @if (Model.FilterInfo.Filters.ToArray()[i].Option == "Quantity")
                            {
                                @Html.DropDownListFor(m => m.FilterInfo.Filters.ToArray()[i].Parameter, new SelectList(Model.NumberFilterParameter, "Key", "Value"),
                                    new { @class = "btn btn-default dropdown-toggle filter-param-select",
                                        id = $"{Model.FilterInfo.Filters.ToArray()[i].Option}ParameterId",
                                        value = Model.FilterInfo.Filters.ToArray()[i].Parameter })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.FilterInfo.Filters.ToArray()[i].Parameter, new SelectList(Model.StringFilterParameter, "Key", "Value"),
                                    new { @class = "btn btn-default dropdown-toggle filter-param-select",
                                        id = $"{Model.FilterInfo.Filters.ToArray()[i].Option}ParameterId",
                                        value = Model.FilterInfo.Filters.ToArray()[i].Parameter })
                            }
                        </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="product-table-div">
    <table class="table" id="productTable">
        <thead>
            <tr>
                <th>

                </th>
                <th>
                    <div id="th-name" data-type="sort" data-name="Name" class="pointer">
                        Product Name
                    </div>
                </th>
                <th>Description</th>
                <th>
                    <div id="th-brand" data-type="sort" data-name="Brand" class="pointer">
                        Brand
                    </div>
                </th>
                <th>
                    <div id="th-quantity" data-type="sort" data-name="Quantity" class="pointer">
                        Quantity
                    </div>
                </th>
                <th class="th-remove"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model.Products)
            {
                <tr onclick="window.open('@Url.Action("Edit", "Product", new {id = product.Id})')" class="pointer">
                    <th>
                        @if (@product.Image != null)
                        {
                            <img class="product-table-image" style="border: 6px solid @product.Color;"
                                 src="data:@product.ImageType;base64,@Convert.ToBase64String(product.Image)" alt="" />
                        }
                        else
                        {
                            <img class="product-table-image" style="border: 6px solid @product.Color;"
                                 src="~/Resources/emptyImage.jpg" alt="" />
                        }
                    </th>
                    <th>
                        @Html.DisplayFor(p => product.Name)
                    </th>
                    <th>
                        @Html.DisplayFor(p => product.Description)
                    </th>
                    <th>
                        @Html.DisplayFor(p => product.Brand)
                    </th>
                    <th>
                        @Html.DisplayFor(p => product.Quantity)
                    </th>
                    <th class="th-remove">
                        <button class="glyphicon glyphicon-remove" data-id="@product.Id"></button>
                    </th>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="row filters-container">
    <div class="col-xs-5">
        @Html.PagedListPager(Model.Products, page => Url.Action("Show", "ProductTable", new {page, count = @Model.PageInfo.ProductCount, by = @Model.PageInfo.SortingOption, filterJson = info}))
    </div>
    <div class="dropdown col-xs-6 product-counter">
        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
            Products count: @Model.PageInfo.ProductCount
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            @for (var i = 1; i < 5; i++)
            {
                <li><a class="dropdown-item" href=@Url.Action("Show", "ProductTable", new {page = Model.PageInfo.Page, count = i*5, by = Model.PageInfo.SortingOption, filterJson = info})>@(i*5)</a></li>
            }
        </ul>
    </div>
    <div class="col-xs-1 product-counter">
        <button class="btn btn-primary" id="FilterBtn">Filter</button>
    </div>
</div>

<div id="RemovingModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Do you want to delete this product?</h4>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-danger" id="removeBtnId">Delete</button>
                <button class="btn btn-default" id="cancelDeleteBtnId">Cancel</button>
            </div>
        </div>
    </div>
</div>


@section scripts
{
    <script>
        $(function () {
            var params = {
                url: '@Url.Action("Show", "ProductTable", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ProductCount, filterJson = info })',
                presentUrl: '@Url.Action("Show", "ProductTable", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ProductCount, by = @Model.PageInfo.SortingOption})',
                sortingOption: '@Model.PageInfo.SortingOption',
                deleteProductUrl: '@Url.Action("Delete", "Product")'
            };
            var productTableNamespace = window.Utils.getNamespace("ProductTable");
            productTableNamespace.init(params);
            var removingModalNamespace = window.Utils.getNamespace("RemovingModal");
            removingModalNamespace.initRemovingModal(params);
        });
    </script>
    @Scripts.Render("~/Product/ProductTable/Scripts")
}

@section stylesheets
{
    @Styles.Render("~/Product/ProductTable/css")
}

