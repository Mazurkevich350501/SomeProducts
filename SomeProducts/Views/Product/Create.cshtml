
@model  SomeProducts.PresentationServices.Models.ProductViewModel

@{
    bool isEdit = Model.Product.ProductId != 0;
    var title = isEdit ? "Edit" : "Create";
    ViewBag.Title = title;
}

<h2>@title</h2>

<form method="post" action=@Url.Action(isEdit ? "Edit" : "Create", "Product") enctype="multipart/form-data">
    @Html.HiddenFor(m => m.Product.ProductId)
    @Html.HiddenFor(m => m.Product.CreateDate)
    @Html.HiddenFor(m => m.Product.ModifiedDate)
    @Html.HiddenFor(m => m.Product.Image)
    @Html.HiddenFor(m => m.Product.ImageType)
    <div class="row">
        <div class="col-lg-8">
            @Html.ValidationMessageFor(m => m.Product.Name, "", new { id = (@Html.IdFor(m => m.Product.Name) + "_Validation") })
            <div class="row">
                <h4 class="col-lg-3">Product Name*</h4>
                @Html.TextBoxFor(m => m.Product.Name, new { @class = "form-control col-lg-5" })
            </div>
            @Html.ValidationMessageFor(m => m.Product.Description, "", new { id = (@Html.IdFor(m => m.Product.Description) + "_Validation") })
            <div class="row description-text-area">
                <h4 class="col-lg-3">Description</h4>
                @Html.TextAreaFor(m => m.Product.Description, new { @class = "form-control col-lg-5"})
            </div>
            @Html.ValidationMessageFor(m => m.Product.BrandId, "", new { id = (@Html.IdFor(m => m.Product.BrandId) + "_Validation") })
            <div class="row">
                <h4 class="col-lg-3">Brand*</h4>
                @Html.DropDownListFor(m => m.Product.BrandId, new SelectList(Model.Brands, "Key", "Value", Model.Product.BrandId), new { @class= "btn col-lg-5 btn-default dropdown-toggle" })            
                <button type="button" id="brandEditBtn" class="btn btn-info buttun-left-margin" data-toggle="modal" data-target="#BrandModal">Edit</button>
            </div>
            @Html.ValidationMessageFor(m => m.Product.Color, "", new { id = (@Html.IdFor(m => m.Product.Color) + "_Validation") })
            <div class="row">
                <h4 class="col-lg-3">Color</h4>
                @Html.DropDownListFor(m => m.Product.Color, new SelectList(Model.Colors, "Key", "Value", Model.Product.Color))
            </div>
            @Html.ValidationMessageFor(m => m.Product.Quantity, "", new { id = (@Html.IdFor(m => m.Product.Quantity) + "_Validation") })
            <div class="row">
                <h4 class="col-lg-3">Quantity</h4>
                @Html.TextBoxFor(m => m.Product.Quantity, new { @class = "form-control col-lg-5" })
            </div>
        </div>
        <div class="col-lg-4">
            <img class="image-box" id="image" />
        <div>
            <input type="file" name="file" id="file" />
        </div>
        </div>
    </div>
    <div>
        <input type="submit" class="btn btn-success" value=@(isEdit ? "Save" : "Create") onclick="addDateToForm()"/>
        @if (isEdit)
        {
            <div id="delete-btn" class="btn btn-warning" onclick="deleteProduct()">Delete</div>
        }
    </div> 
</form>
    
<div id="BrandModal" class="modal fade" role="dialog">
    <div class="modal-dialog" id="modal_dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Brands</h4>
            </div>
            <div class="modal-body" id="modal-body">
                <div>
                    <div class="row">
                        <p class="field-validation-error new-brand-input" id="newBrandValidation"></p>
                        <input class="new-brand-input form-control col-lg-10" id="newBrandName" />
                        <button class="btn btn-success glyphicon glyphicon-plus-sign buttun-left-margin" id="addBtnId"></button>
                    </div>
                </div>   
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" id="saveBtnId">Save</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(function() {
            var params = { id: {} , url: {}};
            params.id.colorpickerId = '@Html.IdFor(m => m.Product.Color)';
            params.id.brandDropdownId = '@Html.IdFor(m => m.Product.BrandId)';
            params.id.imageDataId = '@Html.IdFor(m => m.Product.Image)';
            params.id.imageTypeId = '@Html.IdFor(m => m.Product.ImageType)';
            params.id.quantityId = '@Html.IdFor(m => m.Product.Quantity)';
            params.id.productId = '@Html.IdFor(m => m.Product.ProductId)';
            params.url.deleteProductUrl = '@Url.Action("Delete", "Product")';
            params.url.getBrandsListUrl = '@Url.Action("GetBrandsList", "Product")';
            params.url.isBrandUsingUrl = '@Url.Action("IsBrandUsing", "Product")';
            params.url.saveBrandsChangesUrl = '@Url.Action("SaveBrandsChanges", "Product")';

            var productNamespace = Utils.getNamespace("Product");
            var imageNamespace = Utils.getNamespace("Image");
            var modalWindowNamespace = Utils.getNamespace("ModalWindow");
            console.log(modalWindowNamespace);
            productNamespace.initPage(params);
            imageNamespace.initImage(params);
            modalWindowNamespace.initModalWindow(params);
        });

    </script>

    <script src="~/bower_components/jquery-simplecolorpicker/jquery.simplecolorpicker.js"></script>
    <script src="~/Scripts/Product/Utils.js"></script>
    <script src="~/Scripts/ModalView/ModalView.js"></script>
    <script src="~/Scripts/Product/ProductModalWindowControl.js"></script>
    <script src="~/Scripts/Product/ProductImageController.js"></script>
    <script src="~/Scripts/Product/ProductControl.js"></script>
}

@section stylesheets
{
    <link rel="stylesheet" href="~/bower_components/jquery-simplecolorpicker/jquery.simplecolorpicker.css">
    <link rel="stylesheet" href="~/Scripts/ModalView/ModalView.css" />
    <link rel="stylesheet" href="~/Scripts/Product/Product.css" />
}