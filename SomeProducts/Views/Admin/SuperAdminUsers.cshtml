

@using PagedList.Mvc
@using R = Resources.LocalResource
@model SomeProducts.PresentationServices.Models.Admin.SuperAdminUserTableViewModel
@{
    ViewBag.Title = "Items";
}

<h2>@R.Users</h2>

@Html.Partial("Common/Filters", Model.FilterInfo)

<div class="product-table-div">
    <table class="table" id="productTable">
        <thead>
            <tr>
                <th>
                    <div id="th-id" data-type="sort" data-name="Id" class="pointer">
                        Id
                    </div>
                </th>
                <th>
                    <div id="th-username" data-type="sort" data-name="UserName" class="pointer">
                        @R.Name
                    </div>
                </th>
                <th>
                    <div data-name="roles">
                        @R.Roles
                    </div>
                </th>
                <th>
                    <div id="th-company" data-type="sort" data-name="Company" class="pointer">
                        @R.Company
                    </div>
                </th>
                <th class="th-setAdmin"></th>
                <th class="th-remove"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Items)
            {

                <tr id="tr-@user.Id">
                    <th>
                        @Html.DisplayFor(p => user.Id)
                    </th>
                    <th>
                        @Html.DisplayFor(p => user.Name)
                    </th>
                    <th>
                        @Html.Raw(string.Join(", ", user.Roles)).ToHtmlString()
                    </th>
                    <th>
                        @if (User.Identity.Name != user.Name)
                        {
                            <div class="userCompany">
                                <button class="glyphicon glyphicon-cog btn-setting" data-id="@user.Id"></button>
                                <span class="companyDisplay-@user.Id">@Html.DisplayFor(p => user.CompanyName)</span>
                            </div>
                        }
                    </th>
                    <th class="th-setAdmin">
                        @if (User.Identity.Name != user.Name)
                        {
                            var setAdminBtnColor = user.Roles.Contains(UserRole.Admin.AsString())
                                ? "green" : "red";
                            <button class="btn btn-default" data-id="@user.Id"
                                    id=@($"setAdminBtn{user.Id}")
                                    style=@($"background-color:{setAdminBtnColor};")>
                                @R.Admin
                            </button>
                        }

                    </th>
                    <th class="th-remove">
                        @if (User.Identity.Name != user.Name)
                        {
                            <button class="glyphicon glyphicon-remove" data-id="@user.Id"></button>
                        }
                    </th>
                </tr>
            }
        </tbody>
    </table>
</div>



<div class="row filters-container">
    <div class="col-xs-5">
        @Html.PagedListPager(Model.Items, page => Url.Action("Users", "Admin", new { page, count = @Model.PageInfo.ItemsCount, by = @Model.PageInfo.SortingOption, filter = Model.JsonFilters }))
    </div>
    <div class="dropdown col-xs-6 product-counter">
        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
            @R.ItemsCount: @Model.PageInfo.ItemsCount
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            @for (var i = 5; i <= SomeProducts.CrossCutting.Constants.Constants.MaxItemsCountPerPage; i += 5)
            {
                <li>
                    <a class="dropdown-item" href=@Url.Action("Users", "Admin", new { page = Model.PageInfo.Page, count = i,
                                                 by = Model.PageInfo.SortingOption, filter = Model.JsonFilters })>@i</a>
                                            </li>
            }
        </ul>
    </div>
</div>

<div id="RemovingModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.DeleteUserQuestion</h4>
            </div>
            <form method="post" action=@Url.Action("RemoveUser", "Admin") enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                @Html.Hidden("userId", 0)
                @Html.Hidden("redirectUrl", @Url.Action("Users", "Admin", new
           {
               page = @Model.PageInfo.Page,
               count = @Model.PageInfo.ItemsCount,
               by = @Model.PageInfo.SortingOption,
               filter = Model.JsonFilters
           }))
                <div class="modal-body-central">
                    <input type="submit" class="btn btn-danger" id="removeBtnId" value="@R.Delete" />
                    <button class="btn btn-default" id="cancelDeleteBtnId">@R.Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="SetAdminModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.ChangeAdminRoleQuestion</h4>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-success" id="setAdminBtnId">@R.Confirm</button>
                <button class="btn btn-default" id="cancelSetAdminBtnId">@R.Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="ChangeCompanyModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.SelectCompany:</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-xs-2">
                        <h4>@R.Company:</h4>
                    </div>
                    <div class="col-xs-10">
                        @Html.DropDownList("SelectCompany", new SelectList(Model.CompaniesDictionary, "Key", "Value"), new {@class = "btn btn-default dropdown-toggle", style = "min-width:200px;"})
                    </div>
                </div>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-success" id="changeCompanyBtnId">@R.Confirm</button>
                <button class="btn btn-default" id="cancelChangeCompanyBtnId">@R.Cancel</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(function () {
            var params = {
                url: '@Url.Action("Users", "Admin", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ItemsCount, filter = Model.JsonFilters })',
                presentUrl: '@Url.Action("Users", "Admin", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ItemsCount, by = @Model.PageInfo.SortingOption})',
                sortingOption: '@Model.PageInfo.SortingOption',
                changeAdminRoleUrl: '@Url.Action("ChangeUserAdminRole", "Admin")',
                setCompanyUrl: '@Url.Action("SetUserCompany", "Admin")',
                filters: '@Model.FilterInfo.FiltertsList',
                IllegalCharsError: '@R.IllegalCharsError'
            };

            var sortingNamespace = window.Utils.getNamespace("SortableTable");
            sortingNamespace.init(params);
            var removingModalNamespace = window.Utils.getNamespace("RemovingModal");
            removingModalNamespace.initRemovingModal(params);
            var validationNamespace = window.Utils.getNamespace("Validation");
            validationNamespace.initValidation(params);
            var filterNamespace = window.Utils.getNamespace("Filter");
            filterNamespace.init(params);
        });
    </script>
    @Scripts.Render("~/Product/Admin/Scripts")
    @Scripts.Render("~/Product/Common/Filter/Scripts")
    @Scripts.Render("~/Product/Common/Sorting/Scripts")
}

@section stylesheets
{
    @Styles.Render("~/Product/Admin/css")
    @Styles.Render("~/Product/Common/Filter/css")
}