

@using PagedList.Mvc
@using R = Resources.LocalResource
@model SomeProducts.PresentationServices.Models.Admin.SuperAdminUserTableViewModel
@{
    ViewBag.Title = "Items";
}

<h2>@R.Users</h2>

@Html.Partial("Common/Filters", Model.FilterInfo)

<div class="row-fluid">
    <div class="box span12">
        <div class="box-header">
            <h2><i class="halflings-icon white user"></i><span class="break"></span>@R.Users</h2>
        </div>
        <div class="box-content">
            <div class="dropdown" style="display: inline-block">
                <div class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                    @R.ItemsCount: @Model.PageInfo.ItemsCount
                    <span class="caret"></span>
                </div>
                <ul class="dropdown-menu">
                    @for (var i = 5; i <= SomeProducts.CrossCutting.Constants.Constants.MaxItemsCountPerPage; i += 5)
                    {
                        <li>
                            <a class="dropdown-item" href=@Url.Action("Users", "Admin", new
                                                          {
                                                              page = Model.PageInfo.Page, count = i,
                                                              by = Model.PageInfo.SortingOption, filter = Model.JsonFilters
                                                          })>@i</a>
                        </li>
                    }
                </ul>
            </div>
            <table class="table table-tr-line">
                <thead>
                <tr class="tr-super-admin-users">
                    <th>
                        <div id="th-id" data-type="sort" data-name="Id" class="pointer">
                            Id
                        </div>
                    </th>
                    <th>
                        <div id="th-username" data-type="sort" data-name="UserName" class="pointer">
                            @R.Name
                        </div>
                    </th>
                    <th>
                        <div data-name="roles">
                            @R.Roles
                        </div>
                    </th>
                    <th>
                        <div id="th-company" data-type="sort" data-name="Company" class="pointer">
                            @R.Company
                        </div>
                    </th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in Model.Items)
                {

                    <tr id="tr-@user.Id" class="tr-super-admin-users">
                        <td>
                            @Html.DisplayFor(p => user.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(p => user.Name)
                        </td>
                        <td>
                            @Html.Raw(string.Join(", ", user.Roles)).ToHtmlString()
                        </td>
                        <td>
                            @if (User.Identity.Name != user.Name)
                            {
                                <div class="userCompany">
                                    <button class="btn btn-small btn-info" 
                                            title="@R.Edit"
                                            data-id="@user.Id">
                                        <i class="halflings-icon white pencil"></i>
                                    </button>
                                    <span class="companyDisplay-@user.Id">@Html.DisplayFor(p => user.CompanyName)</span>
                                </div>
                            }
                        </td>
                        <td>
                            @if (User.Identity.Name != user.Name)
                            {
                                if (user.Roles.Contains(UserRole.Admin.AsString()))
                                {
                                    <button class="btn btn-success btn-small" 
                                            data-id="@user.Id"
                                            data-type="setAdmin-btn"
                                            id=@($"setAdminBtn{user.Id}")
                                            title="@R.UnsetAdmin">
                                        <i class="halflings-icon white font"
                                           data-id="@user.Id"
                                           data-company="@user.CompanyId"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-danger btn-small" 
                                            data-id="@user.Id"
                                            data-type="setAdmin-btn"
                                            id=@($"setAdminBtn{user.Id}")
                                            title="@R.SetAdmin">
                                        <i class="halflings-icon white font"
                                           data-id="@user.Id"
                                           data-company="@user.CompanyId"></i>
                                    </button>
                                }
                            }

                            @if (User.Identity.Name != user.Name)
                            {
                                <button class="btn btn-danger btn-small"
                                        data-id="@user.Id"
                                        data-type="remove-btn"
                                        title="@R.Delete">
                                    <i class="halflings-icon white trash"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="pagination pagination-centered">
                @Html.PagedListPager(Model.Items, page => Url.Action("Users", "Admin", new {page, count = @Model.PageInfo.ItemsCount, by = @Model.PageInfo.SortingOption, filter = Model.JsonFilters}))
            </div>
        </div>
    </div>
</div>


<div id="RemovingModal" class="modal hide fade" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.DeleteUserQuestion</h4>
            </div>
            <form method="post" action=@Url.Action("RemoveUser", "Admin") enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                @Html.Hidden("userId", 0)
                @Html.Hidden("redirectUrl", @Url.Action("Users", "Admin", new
           {
               page = @Model.PageInfo.Page,
               count = @Model.PageInfo.ItemsCount,
               by = @Model.PageInfo.SortingOption,
               filter = Model.JsonFilters
           }))
                <div class="modal-body-central">
                    <input type="submit" class="btn btn-danger" id="removeBtnId" value="@R.Delete" />
                    <button class="btn btn-default" id="cancelDeleteBtnId">@R.Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="SetAdminModal" class="modal hide fade" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.ChangeAdminRoleQuestion</h4>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-success" id="setAdminBtnId">@R.Confirm</button>
                <button class="btn btn-default" id="cancelSetAdminBtnId">@R.Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="ChangeCompanyModal" class="modal hide fade" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.SelectCompany:</h4>
            </div>
            <div class="modal-body">
                <div class="row-fluid">
                    <div>
                        <h4>@R.Company:</h4>
                    </div>
                    <div>
                        @Html.DropDownList("SelectCompany", new SelectList(Model.CompaniesDictionary, "Key", "Value"), new { @class = "btn btn-default dropdown-toggle", style = "min-width:200px;" })
                    </div>
                </div>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-success" id="changeCompanyBtnId">@R.Confirm</button>
                <button class="btn btn-default" id="cancelChangeCompanyBtnId">@R.Cancel</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(function () {
            var params = {
                url: '@Url.Action("Users", "Admin", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ItemsCount, filter = Model.JsonFilters })',
                presentUrl: '@Url.Action("Users", "Admin", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ItemsCount, by = @Model.PageInfo.SortingOption})',
                sortingOption: '@Model.PageInfo.SortingOption',
                changeAdminRoleUrl: '@Url.Action("ChangeUserAdminRole", "Admin")',
                setCompanyUrl: '@Url.Action("SetUserCompany", "Admin")',
                filters: '@Model.FilterInfo.FiltertsList',
                IllegalCharsError: '@R.IllegalCharsError',
                setAdmin: '@R.SetAdmin',
                unsetAdmin: '@R.UnsetAdmin',
                requestErrorMessage: '@R.ServerRequestErrorMessage',
                userCompanyChangeSuccessMessage: '@R.UserCompanyChangeSuccessMessage',
                userRoleChangeSuccessMessge: '@R.UserRoleChangeSuccessMessge'
            };

            var sortingNamespace = window.Utils.getNamespace("SortableTable");
            sortingNamespace.init(params);
            var removingModalNamespace = window.Utils.getNamespace("RemovingModal");
            removingModalNamespace.initRemovingModal(params);
            var validationNamespace = window.Utils.getNamespace("Validation");
            validationNamespace.initValidation(params);
            var filterNamespace = window.Utils.getNamespace("Filter");
            filterNamespace.init(params);
        });
    </script>
    @Scripts.Render("~/Product/Admin/Scripts")
    @Scripts.Render("~/Product/Common/Filter/Scripts")
    @Scripts.Render("~/Product/Common/Sorting/Scripts")
}

@section stylesheets
{
    @Styles.Render("~/Product/Admin/css")
    @Styles.Render("~/Product/Common/Filter/css")
}