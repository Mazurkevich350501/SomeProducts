
@using PagedList.Mvc
@using SomeProducts.CrossCutting.Helpers
@using R = Resources.LocalResource
@model SomeProducts.PresentationServices.Models.Admin.AdminUserTableViewModel
@{
    ViewBag.Title = "Items";
}

<h2>@R.Users</h2>

@Html.Partial("Common/Filters", Model.FilterInfo)

<div class="row-fluid">
    <div class="box span12">
        <div class="box-header">
            <h2><i class="halflings-icon white user"></i><span class="break"></span>@R.Users</h2>
        </div>
        <div class="box-content">
            <div class="dropdown" style="display: inline-block">
                <div class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                    @R.ItemsCount: @Model.PageInfo.ItemsCount
                    <span class="caret"></span>
                </div>
                <ul class="dropdown-menu">
                    @for (var i = 5; i <= SomeProducts.CrossCutting.Constants.Constants.MaxItemsCountPerPage; i += 5)
            {
            <li>
                <a class="dropdown-item" href=@Url.Action("Users", "Admin", new
                                                          {
                                                              page = Model.PageInfo.Page, count = i,
                                                              by = Model.PageInfo.SortingOption, filter = Model.JsonFilters
                                                          })>@i</a>
                                                    </li>
            }
                </ul>
            </div>
            <table class="table table-bordered table-striped table-condensed">
                <thead>
                    <tr class="tr-admin-users">
                        <td>
                            <div id="th-id" data-type="sort" data-name="Id" class="pointer">
                                Id
                            </div>
                        </td>
                        <td>
                            <div id="th-username" data-type="sort" data-name="UserName" class="pointer">
                                @R.Name
                            </div>
                        </td>
                        <td>
                            <div data-name="roles">
                                @R.Roles
                            </div>
                        </td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.Items)
            {

            <tr id="tr-@user.Id" class="tr-admin-users">
                <th>
                    @Html.DisplayFor(p => user.Id)
                </th>
                <th>
                    @Html.DisplayFor(p => user.Name)
                </th>
                <th>
                    @Html.Raw(string.Join(", ", user.Roles)).ToHtmlString()
                </th>
                <th>
                    @if (User.Identity.Name != user.Name)
                        {
                            if (user.CompanyId == User.GetCompany())
                            {
                                <button data-id="@user.Id"
                                        data-company="@user.CompanyId"
                                        class="btn btn-danger btn-small"
                                        data-type="addOrRemove-btn"
                                        id=@($"addOrRemoveCompanyUserBtn{user.Id}")>
                                    <i class="halflings-icon white remove-sign"
                                       data-id="@user.Id"
                                       data-company="@user.CompanyId"></i>
                                </button>
                            }
                            else
                            {
                                <button data-id="@user.Id"
                                        data-company="@user.CompanyId"
                                        class="btn btn-success btn-small"
                                        data-type="addOrRemove-btn"
                                        id=@($"addOrRemoveCompanyUserBtn{user.Id}")>
                                    <i class="halflings-icon white ok-sign"
                                       data-id="@user.Id"
                                       data-company="@user.CompanyId"></i>
                                </button>
                            }
                        }
                    @if (User.Identity.Name != user.Name)
                    {
                        if (user.Roles.Contains(UserRole.Admin.AsString()))
                        {
                            <button class="btn btn-success btn-small" data-id="@user.Id"
                                    data-type="setAdmin-btn"
                                    id=@($"setAdminBtn{user.Id}")>
                                <i class="halflings-icon white font"
                                   data-id="@user.Id"
                                   data-company="@user.CompanyId"></i>
                            </button>
                        }
                        else
                        {
                            var display = user.CompanyId != User.GetCompany() ? "none" : "auto";
                            <button class="btn btn-danger btn-small" data-id="@user.Id"
                                    data-type="setAdmin-btn"
                                    id=@($"setAdminBtn{user.Id}")
                                    style="display: @display">
                                <i class="halflings-icon white font"
                                   data-id="@user.Id"
                                   data-company="@user.CompanyId"></i>
                            </button>
                        }
                    }
                </th>
            </tr>
            }
                </tbody>
            </table>
            <div class="pagination pagination-centered">
                @Html.PagedListPager(Model.Items, page => Url.Action("Users", "Admin", new { page, count = @Model.PageInfo.ItemsCount, by = @Model.PageInfo.SortingOption, filter = Model.JsonFilters }))
            </div>
        </div>
    </div>
</div>


<div id="AddingOrRemovingModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="AddingOrRemovingModalMessageId">@R.DeleteUserQuestion</h4>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-success" id="addOrRemoveBtnId">@R.Confirm</button>
                <button class="btn btn-default" id="cancelAddingOrRemovingBtnId">@R.Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="RemovingModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.DeleteUserQuestion</h4>
            </div>
            <form method="post" action=@Url.Action("RemoveUser", "Admin") enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                @Html.Hidden("userId", 0)
                @Html.Hidden("redirectUrl", @Url.Action("Users", "Admin", new
           {
               page = @Model.PageInfo.Page,
               count = @Model.PageInfo.ItemsCount,
               by = @Model.PageInfo.SortingOption,
               filter = Model.JsonFilters
           }))
                <div class="modal-body-central">
                    <input type="submit" class="btn btn-danger" id="removeBtnId" value="@R.Delete" />
                    <button class="btn btn-default" id="cancelDeleteBtnId">@R.Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="SetAdminModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@R.ChangeAdminRoleQuestion</h4>
            </div>
            <div class="modal-body-central">
                <button class="btn btn-success" id="setAdminBtnId">@R.Confirm</button>
                <button class="btn btn-default" id="cancelSetAdminBtnId">@R.Cancel</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(function () {
            var params = {
                url: '@Url.Action("Users", "Admin", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ItemsCount, filter = Model.JsonFilters })',
                presentUrl: '@Url.Action("Users", "Admin", new { page = @Model.PageInfo.Page, count = @Model.PageInfo.ItemsCount, by = @Model.PageInfo.SortingOption})',
                sortingOption: '@Model.PageInfo.SortingOption',
                changeAdminRoleUrl: '@Url.Action("ChangeUserAdminRole", "Admin")',
                setCompanyUrl: '@Url.Action("SetUserCompany", "Admin")',
                filters: '@Model.FilterInfo.FiltertsList',
                IllegalCharsError: '@R.IllegalCharsError',
                adminCompanyId: parseInt('@User.GetCompany()'),
                addUserToCompanyQuestion: '@R.AddUserToCompanyQuestion',
                removeUserFromCompanyQuestion: '@R.RemoveUserFromCompanyQuestion'
            };

            var sortingNamespace = window.Utils.getNamespace("SortableTable");
            sortingNamespace.init(params);
            var removingModalNamespace = window.Utils.getNamespace("RemovingModal");
            removingModalNamespace.initRemovingModal(params);
            var validationNamespace = window.Utils.getNamespace("Validation");
            validationNamespace.initValidation(params);
            var filterNamespace = window.Utils.getNamespace("Filter");
            filterNamespace.init(params);
        });
    </script>
    @Scripts.Render("~/Product/Admin/Scripts")
    @Scripts.Render("~/Product/Common/Filter/Scripts")
    @Scripts.Render("~/Product/Common/Sorting/Scripts")
}

@section stylesheets
{
    @Styles.Render("~/Product/Admin/css")
    @Styles.Render("~/Product/Common/Filter/css")
}