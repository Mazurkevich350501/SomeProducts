@model SomeProducts.PresentationServices.Models.Account.RegistrationViewModel
@using R = Resources.LocalResource
@{
    Layout = "_LogInLayout.cshtml";
    ViewBag.Title = "Register";
    string returnUrl = ViewBag.ReturnUrl ?? Url.Action("Show", "ProductTable");
}

<h2>@R.Register</h2>

<form method="post" action=@Url.Action("Register", "Account") enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    @Html.Hidden("returnUrl", returnUrl)
    @Html.ValidationMessage("Error")
    <div>
        <div class="error-message-container">
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="input-prepend" title="@R.Username">
            <span class="add-on"><i class="halflings-icon user"></i></span>
            @Html.TextBoxFor(m => m.Name, new {@class = "input-large span10", placeholder = $"{@R.Type} {@R.Username}"})
        </div>

        <div class="error-message-container">
            @Html.ValidationMessageFor(m => m.Password)
        </div>
        <div class="input-prepend" title="@R.Password">
            <span class="add-on"><i class="halflings-icon lock"></i></span>
            @Html.TextBoxFor(m => m.Password,
           new {@class = "input-large span10", placeholder = $"{@R.Type} {@R.Password}", type = "password" })
        </div>

        <div class="error-message-container">
            @Html.ValidationMessageFor(m => m.ConfirmPassword)
        </div>
        <div class="input-prepend" title="@R.ConfirmPassword">
            <span class="add-on"><i class="halflings-icon lock"></i></span>
            @Html.TextBoxFor(m => m.ConfirmPassword,
           new {@class = "input-large span10", placeholder = $"{@R.Type} {@R.ConfirmPassword}", type = "password" })
        </div>
    </div>
    <div class="button-login">
        <input class="btn btn-info" type="submit" value="@R.Register" />
    </div>
    <div class="clearfix"></div>
</form>

@section stylesheets
{
    @Styles.Render("~/Account/Auth/css")
}

@section scripts
{
    <script>
        $(function () {
            var params = {
                IllegalCharsError: '@R.IllegalCharsError'
            };
            var validationNamespace = window.Utils.getNamespace("AccountValidation");
            validationNamespace.init(params);
        });
    </script>
    @Scripts.Render("~/Account/Auth/Scripts")
}